"""
This type stub file was generated by pyright.
"""

import os
import sys
import ctypes
import ctypes.util
import distutils.sysconfig
import pkg_resources
import inspect
from platform import system
from os.path import dirname, join, split
from . import arm, arm64, evm, m680x, m68k, mips, ppc, sparc, systemz, tms320c64x, x86, xcore

_python2 = ...
if _python2:
    range = ...
__all__ = ['Cs', 'CsInsn', 'cs_disasm_quick', 'cs_disasm_lite', 'cs_version', 'cs_support', 'version_bind', 'debug', 'CS_API_MAJOR', 'CS_API_MINOR', 'CS_VERSION_MAJOR', 'CS_VERSION_MINOR', 'CS_VERSION_EXTRA', 'CS_ARCH_ARM', 'CS_ARCH_ARM64', 'CS_ARCH_MIPS', 'CS_ARCH_X86', 'CS_ARCH_PPC', 'CS_ARCH_SPARC', 'CS_ARCH_SYSZ', 'CS_ARCH_XCORE', 'CS_ARCH_M68K', 'CS_ARCH_TMS320C64X', 'CS_ARCH_M680X', 'CS_ARCH_EVM', 'CS_ARCH_ALL', 'CS_MODE_LITTLE_ENDIAN', 'CS_MODE_BIG_ENDIAN', 'CS_MODE_16', 'CS_MODE_32', 'CS_MODE_64', 'CS_MODE_ARM', 'CS_MODE_THUMB', 'CS_MODE_MCLASS', 'CS_MODE_MICRO', 'CS_MODE_MIPS3', 'CS_MODE_MIPS32R6', 'CS_MODE_MIPS2', 'CS_MODE_V8', 'CS_MODE_V9', 'CS_MODE_QPX', 'CS_MODE_M68K_000', 'CS_MODE_M68K_010', 'CS_MODE_M68K_020', 'CS_MODE_M68K_030', 'CS_MODE_M68K_040', 'CS_MODE_M68K_060', 'CS_MODE_MIPS32', 'CS_MODE_MIPS64', 'CS_MODE_M680X_6301', 'CS_MODE_M680X_6309', 'CS_MODE_M680X_6800', 'CS_MODE_M680X_6801', 'CS_MODE_M680X_6805', 'CS_MODE_M680X_6808', 'CS_MODE_M680X_6809', 'CS_MODE_M680X_6811', 'CS_MODE_M680X_CPU12', 'CS_MODE_M680X_HCS08', 'CS_OPT_SYNTAX', 'CS_OPT_SYNTAX_DEFAULT', 'CS_OPT_SYNTAX_INTEL', 'CS_OPT_SYNTAX_ATT', 'CS_OPT_SYNTAX_NOREGNAME', 'CS_OPT_SYNTAX_MASM', 'CS_OPT_DETAIL', 'CS_OPT_MODE', 'CS_OPT_ON', 'CS_OPT_OFF', 'CS_ERR_OK', 'CS_ERR_MEM', 'CS_ERR_ARCH', 'CS_ERR_HANDLE', 'CS_ERR_CSH', 'CS_ERR_MODE', 'CS_ERR_OPTION', 'CS_ERR_DETAIL', 'CS_ERR_VERSION', 'CS_ERR_MEMSETUP', 'CS_ERR_DIET', 'CS_ERR_SKIPDATA', 'CS_ERR_X86_ATT', 'CS_ERR_X86_INTEL', 'CS_SUPPORT_DIET', 'CS_SUPPORT_X86_REDUCE', 'CS_SKIPDATA_CALLBACK', 'CS_OP_INVALID', 'CS_OP_REG', 'CS_OP_IMM', 'CS_OP_MEM', 'CS_OP_FP', 'CS_GRP_INVALID', 'CS_GRP_JUMP', 'CS_GRP_CALL', 'CS_GRP_RET', 'CS_GRP_INT', 'CS_GRP_IRET', 'CS_GRP_PRIVILEGE', 'CS_AC_INVALID', 'CS_AC_READ', 'CS_AC_WRITE', 'CsError', '__version__']
CS_API_MAJOR = ...
CS_API_MINOR = ...
CS_VERSION_MAJOR = ...
CS_VERSION_MINOR = ...
CS_VERSION_EXTRA = ...
__version__ = ...
CS_ARCH_ARM = ...
CS_ARCH_ARM64 = ...
CS_ARCH_MIPS = ...
CS_ARCH_X86 = ...
CS_ARCH_PPC = ...
CS_ARCH_SPARC = ...
CS_ARCH_SYSZ = ...
CS_ARCH_XCORE = ...
CS_ARCH_M68K = ...
CS_ARCH_TMS320C64X = ...
CS_ARCH_M680X = ...
CS_ARCH_EVM = ...
CS_ARCH_MAX = ...
CS_ARCH_ALL = ...
CS_MODE_LITTLE_ENDIAN = ...
CS_MODE_ARM = ...
CS_MODE_16 = ...
CS_MODE_32 = ...
CS_MODE_64 = ...
CS_MODE_THUMB = ...
CS_MODE_MCLASS = ...
CS_MODE_V8 = ...
CS_MODE_MICRO = ...
CS_MODE_MIPS3 = ...
CS_MODE_MIPS32R6 = ...
CS_MODE_MIPS2 = ...
CS_MODE_V9 = ...
CS_MODE_QPX = ...
CS_MODE_M68K_000 = ...
CS_MODE_M68K_010 = ...
CS_MODE_M68K_020 = ...
CS_MODE_M68K_030 = ...
CS_MODE_M68K_040 = ...
CS_MODE_M68K_060 = ...
CS_MODE_BIG_ENDIAN = ...
CS_MODE_MIPS32 = ...
CS_MODE_MIPS64 = ...
CS_MODE_M680X_6301 = ...
CS_MODE_M680X_6309 = ...
CS_MODE_M680X_6800 = ...
CS_MODE_M680X_6801 = ...
CS_MODE_M680X_6805 = ...
CS_MODE_M680X_6808 = ...
CS_MODE_M680X_6809 = ...
CS_MODE_M680X_6811 = ...
CS_MODE_M680X_CPU12 = ...
CS_MODE_M680X_HCS08 = ...
CS_OPT_SYNTAX = ...
CS_OPT_DETAIL = ...
CS_OPT_MODE = ...
CS_OPT_MEM = ...
CS_OPT_SKIPDATA = ...
CS_OPT_SKIPDATA_SETUP = ...
CS_OPT_MNEMONIC = ...
CS_OPT_UNSIGNED = ...
CS_OPT_OFF = ...
CS_OPT_ON = ...
CS_OP_INVALID = ...
CS_OP_REG = ...
CS_OP_IMM = ...
CS_OP_MEM = ...
CS_OP_FP = ...
CS_GRP_INVALID = ...
CS_GRP_JUMP = ...
CS_GRP_CALL = ...
CS_GRP_RET = ...
CS_GRP_INT = ...
CS_GRP_IRET = ...
CS_GRP_PRIVILEGE = ...
CS_AC_INVALID = ...
CS_AC_READ = ...
CS_AC_WRITE = ...
CS_OPT_SYNTAX_DEFAULT = ...
CS_OPT_SYNTAX_INTEL = ...
CS_OPT_SYNTAX_ATT = ...
CS_OPT_SYNTAX_NOREGNAME = ...
CS_OPT_SYNTAX_MASM = ...
CS_ERR_OK = ...
CS_ERR_MEM = ...
CS_ERR_ARCH = ...
CS_ERR_HANDLE = ...
CS_ERR_CSH = ...
CS_ERR_MODE = ...
CS_ERR_OPTION = ...
CS_ERR_DETAIL = ...
CS_ERR_MEMSETUP = ...
CS_ERR_VERSION = ...
CS_ERR_DIET = ...
CS_ERR_SKIPDATA = ...
CS_ERR_X86_ATT = ...
CS_ERR_X86_INTEL = ...
CS_ERR_X86_MASM = ...
CS_SUPPORT_DIET = ...
CS_SUPPORT_X86_REDUCE = ...
CS_AC = ...
CS_ARCH = ...
CS_ERR = ...
CS_GRP = ...
CS_MODE = ...
CS_OP = ...
CS_OPT = ...
if nothasattr(sys.modules[__name__], '__file__'):
    __file__ = ...
if sys.platform == 'darwin':
    ...
else:
    _lib = ...
    _lib = ...
_found = ...
_cs = ...
_path_list = ...
def copy_ctypes(src): # -> Any:
    """Returns a new ctypes object which is a bitwise copy of an existing one"""
    ...

def copy_ctypes_list(src): # -> list[Any]:
    ...

class _cs_arch(ctypes.Union):
    _fields_ = ...


class _cs_detail(ctypes.Structure):
    _fields_ = ...


class _cs_insn(ctypes.Structure):
    _fields_ = ...


CS_SKIPDATA_CALLBACK = ...
class _cs_opt_skipdata(ctypes.Structure):
    _fields_ = ...


class _cs_opt_mnem(ctypes.Structure):
    _fields_ = ...


class CsError(Exception):
    def __init__(self, errno) -> None:
        ...
    
    if _python2:
        def __str__(self) -> str:
            ...
        
    else:
        def __str__(self) -> str:
            ...
        


def cs_version(): # -> tuple[int, int, Any]:
    ...

def version_bind(): # -> tuple[Literal[4], Literal[0], int]:
    ...

def cs_support(query): # -> Any:
    ...

class _dummy_cs:
    def __init__(self, csh, arch) -> None:
        ...
    


def cs_disasm_quick(arch, mode, code, offset, count=...): # -> Generator[CsInsn, None, None]:
    ...

def cs_disasm_lite(arch, mode, code, offset, count=...): # -> Generator[tuple[Any, Any, Any, Any], None, None]:
    ...

class CsInsn:
    def __init__(self, cs, all_info) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def id(self): # -> Any:
        ...
    
    @property
    def address(self): # -> Any:
        ...
    
    @property
    def size(self): # -> Any:
        ...
    
    @property
    def bytes(self): # -> bytearray:
        ...
    
    @property
    def mnemonic(self): # -> Any:
        ...
    
    @property
    def op_str(self): # -> Any:
        ...
    
    @property
    def regs_read(self): # -> Any:
        ...
    
    @property
    def regs_write(self): # -> Any:
        ...
    
    @property
    def groups(self): # -> Any:
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def errno(self): # -> Any:
        ...
    
    def reg_name(self, reg_id, default=...): # -> Any | None:
        ...
    
    def insn_name(self, default=...): # -> Any | None:
        ...
    
    def group_name(self, group_id, default=...): # -> Any | None:
        ...
    
    def group(self, group_id): # -> bool:
        ...
    
    def reg_read(self, reg_id): # -> bool:
        ...
    
    def reg_write(self, reg_id): # -> bool:
        ...
    
    def op_count(self, op_type): # -> int:
        ...
    
    def op_find(self, op_type, position): # -> Any | None:
        ...
    
    def regs_access(self): # -> tuple[list[Any] | tuple[()], list[Any] | tuple[()]]:
        ...
    


class Cs:
    def __init__(self, arch, mode) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    @property
    def diet(self): # -> Any:
        ...
    
    @property
    def x86_reduce(self): # -> Any:
        ...
    
    @property
    def syntax(self): # -> int | None:
        ...
    
    @syntax.setter
    def syntax(self, style): # -> None:
        ...
    
    @property
    def skipdata(self): # -> bool:
        ...
    
    @skipdata.setter
    def skipdata(self, opt): # -> None:
        ...
    
    @property
    def skipdata_setup(self): # -> tuple[str | Unknown, None, None] | tuple[str | Unknown, Unknown, Unknown]:
        ...
    
    @skipdata_setup.setter
    def skipdata_setup(self, opt): # -> None:
        ...
    
    @property
    def skipdata_mnem(self): # -> str:
        ...
    
    @skipdata_mnem.setter
    def skipdata_mnem(self, mnem): # -> None:
        ...
    
    @property
    def skipdata_callback(self): # -> tuple[None, None] | tuple[Unknown, Unknown]:
        ...
    
    @skipdata_callback.setter
    def skipdata_callback(self, val): # -> None:
        ...
    
    def mnemonic_setup(self, id, mnem): # -> None:
        ...
    
    def support(self, query): # -> Any:
        ...
    
    @property
    def detail(self): # -> bool:
        ...
    
    @detail.setter
    def detail(self, opt): # -> None:
        ...
    
    @property
    def imm_unsigned(self): # -> bool:
        ...
    
    @imm_unsigned.setter
    def imm_unsigned(self, opt): # -> None:
        ...
    
    @property
    def mode(self): # -> Unknown:
        ...
    
    @mode.setter
    def mode(self, opt): # -> None:
        ...
    
    def errno(self): # -> Any:
        ...
    
    def reg_name(self, reg_id, default=...): # -> Any | None:
        ...
    
    def insn_name(self, insn_id, default=...): # -> Any | None:
        ...
    
    def group_name(self, group_id, default=...): # -> Any | None:
        ...
    
    def disasm(self, code, offset, count=...): # -> Generator[CsInsn, None, None]:
        ...
    
    def disasm_lite(self, code, offset, count=...): # -> Generator[tuple[Any, Any, Any, Any], None, None]:
        ...
    


def debug(): # -> str:
    ...

